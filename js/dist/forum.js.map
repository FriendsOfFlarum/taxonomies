{"version":3,"sources":["webpack://@fof/taxonomies/webpack/bootstrap","webpack://@fof/taxonomies/external \"flarum.core.compat['app']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Model']\"","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Button']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['extend']\"","webpack://@fof/taxonomies/./src/common/utils/sortTaxonomies.js","webpack://@fof/taxonomies/./src/common/utils/sortTerms.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/taxonomies/./src/common/helpers/taxonomyIcon.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/mixin']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/classList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Component']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/taxonomies/./src/common/models/Taxonomy.js","webpack://@fof/taxonomies/./src/common/models/Term.js","webpack://@fof/taxonomies/./src/common/addModels.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extract']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/highlight']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extractText']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/KeyboardNavigatable']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/IndexPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Dropdown']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/taxonomies/./src/common/helpers/termLabel.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/taxonomies/./src/common/utils/termToIdentifier.js","webpack://@fof/taxonomies/./src/forum/components/ChooseTaxonomyTermsModal.js","webpack://@fof/taxonomies/./src/common/helpers/termsLabel.js","webpack://@fof/taxonomies/./src/forum/components/TaxonomyDropdown.js","webpack://@fof/taxonomies/./src/forum/addIndexFilters.js","webpack://@fof/taxonomies/./src/forum/index.js","webpack://@fof/taxonomies/./src/forum/addComposerControls.js","webpack://@fof/taxonomies/./src/forum/addDiscussionControls.js","webpack://@fof/taxonomies/./src/forum/addLabels.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","taxonomies","slice","sort","a","b","order","terms","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","Taxonomy","mixin","Model","attribute","slug","description","showLabel","showFilter","allowCustomValues","minTerms","maxTerms","createdAt","transformDate","uniqueKey","computed","id","Term","taxonomy","hasOne","app","store","models","termLabel","link","extract","tagText","translator","trans","title","href","route","tags","config","_extends","assign","target","arguments","length","source","apply","this","getIdentifier","attributes","ChooseTaxonomyTermsModal","init","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","props","forEach","addTerm","discussion","taxonomyTerms","request","method","url","forum","apiEndpoint","then","result","sortTerms","pushPayload","redraw","navigator","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","splice","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","getInstruction","count","remaining","transChoice","content","filter","toLowerCase","substr","some","createRecord","map","onclick","onready","placeholder","extractText","oninput","event","onkeydown","navigate","onfocus","onblur","Button","component","disabled","LoadingIndicator","colored","selected","active","onmouseover","toggleTerm","exists","highlight","e","$element","getDomElement","metaKey","ctrlKey","is","$","submit","dispatchEvent","Event","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","onsubmit","preventDefault","save","relationships","verbatim","termToIdentifier","current","DiscussionPage","stream","update","modal","close","strategy","Modal","tagsLabel","children","tag","TaxonomyDropdown","termsInitialized","view","Dropdown","buttonClassName","label","onshow","pushData","onchange","Component","taxonomyFilterTerms","initializers","add","extend","DiscussionComposer","items","sortTaxonomies","all","show","focus","termsLabel","override","original","callback","selectedTags","taxonomyData","model","DiscussionControls","IndexPage","find","indexOf","existingTerm","cache","discussionList","refresh","DiscussionList","params","q","DiscussionListItem","DiscussionHero","addModels","Discussion","hasMany"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['extend'];","export default function (taxonomies) {\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","export default function (terms) {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['components/LoadingIndicator'];","import classList from 'flarum/utils/classList';\n\n/* global m */\n\nexport default function taxonomyIcon(term, attrs = {}, settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['utils/mixin'];","module.exports = flarum.core.compat['utils/classList'];","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['utils/computed'];","import Model from 'flarum/Model';\nimport computed from 'flarum/utils/computed';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Taxonomy extends mixin(Model, {\n    name: Model.attribute('name'),\n    slug: Model.attribute('slug'),\n    description: Model.attribute('description'),\n    color: Model.attribute('color'),\n    icon: Model.attribute('icon'),\n    order: Model.attribute('order'),\n    showLabel: Model.attribute('showLabel'),\n    showFilter: Model.attribute('showFilter'),\n    allowCustomValues: Model.attribute('allowCustomValues'),\n    minTerms: Model.attribute('minTerms'),\n    maxTerms: Model.attribute('maxTerms'),\n    createdAt: Model.attribute('createdAt', Model.transformDate),\n\n    uniqueKey: computed('id', id => 'taxonomy' + id),\n}) {\n    //\n}\n","import Model from 'flarum/Model';\nimport mixin from 'flarum/utils/mixin';\n\nexport default class Term extends mixin(Model, {\n    name: Model.attribute('name'),\n    slug: Model.attribute('slug'),\n    description: Model.attribute('description'),\n    color: Model.attribute('color'),\n    icon: Model.attribute('icon'),\n    order: Model.attribute('order'),\n    createdAt: Model.attribute('createdAt', Model.transformDate),\n\n    taxonomy: Model.hasOne('taxonomy'),\n}) {\n    //\n}\n","import app from 'flarum/app';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['fof-taxonomies'] = Taxonomy;\n    app.store.models['fof-taxonomy-terms'] = Term;\n}\n","module.exports = flarum.core.compat['utils/extract'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['helpers/highlight'];","module.exports = flarum.core.compat['utils/extractText'];","module.exports = flarum.core.compat['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['components/DiscussionList'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['components/DiscussionHero'];","import app from 'flarum/app';\nimport extract from 'flarum/utils/extract';\nimport taxonomyIcon from './taxonomyIcon';\n\n/* global m */\n\nexport default function termLabel(term, attrs = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const link = extract(attrs, 'link') && false; //TODO: link\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        if (link) {\n            attrs.title = term.description() || '';\n            attrs.href = app.route('tag', {tags: term.slug()});\n            attrs.config = m.route;\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m((link ? 'a' : 'span'), attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/Model';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport highlight from 'flarum/helpers/highlight';\nimport classList from 'flarum/utils/classList';\nimport extractText from 'flarum/utils/extractText';\nimport KeyboardNavigatable from 'flarum/utils/KeyboardNavigatable';\n\nimport termLabel from '../../common/helpers/termLabel';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport sortTerms from '../../common/utils/sortTerms';\nimport termToIdentifier from '../../common/utils/termToIdentifier';\n\n/* global m */\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a, b) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    init() {\n        super.init();\n\n        this.availableTerms = null; // List of models\n        this.selectedTerms = []; // List of models\n        this.searchFilter = '';\n        this.activeListIndex = 0;\n        this.inputIsFocused = false;\n\n        if (this.props.selectedTerms) {\n            this.props.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.props.discussion) {\n            this.props.discussion.taxonomyTerms().forEach(term => {\n                if (term.taxonomy().id() === this.props.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = sortTerms(app.store.pushPayload(result));\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => this.selectedTerms.splice(this.selectedTerms.length - 1, 1));\n    }\n\n    indexInSelectedTerms(term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'TagDiscussionModal';//TODO\n    }\n\n    title() {\n        return this.props.discussion\n            ? app.translator.trans('fof-taxonomies.forum.modal.title.edit', {\n                taxonomy: this.props.taxonomy.name(),\n                title: m('em', this.props.discussion.title()),\n            })\n            : app.translator.trans('fof-taxonomies.forum.modal.title.new', {\n                taxonomy: this.props.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.props.taxonomy.minTerms() && count < this.props.taxonomy.minTerms()) {\n            const remaining = this.props.taxonomy.minTerms() - count;\n            return app.translator.transChoice('fof-taxonomies.forum.modal.placeholder', remaining, {remaining});\n        }\n\n        return '';\n    }\n\n    content() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.props.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                availableTerms.push(app.store.createRecord('fof-taxonomy-terms', {\n                    attributes: {\n                        name: this.searchFilter,\n                    },\n                }));\n            }\n        }\n\n        if (this.props.taxonomy.maxTerms() && this.selectedTerms.length >= this.props.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return [\n            m('.Modal-body', m('.TagDiscussionModal-form', [\n                m('.TagDiscussionModal-form-input', m('.TagsInput.FormControl', {\n                    className: this.inputIsFocused ? 'focus' : '',\n                }, [\n                    m('span.TagsInput-selected', this.selectedTerms.map(term => {\n                        return m('span.TagsInput-tag', {\n                            onclick: () => {\n                                this.removeTerm(term);\n                                this.onready();\n                            },\n                        }, termLabel(term));\n                    })),\n                    m('input.FormControl', {\n                        placeholder: extractText(this.getInstruction()),\n                        value: this.searchFilter,\n                        oninput: event => {\n                            this.searchFilter = event.target.value;\n                            this.activeListIndex = 0;\n                        },\n                        onkeydown: this.navigator.navigate.bind(this.navigator),\n                        onfocus: () => this.inputIsFocused = true,\n                        onblur: () => this.inputIsFocused = false,\n                    }),\n                ])),\n                m('.TagDiscussionModal-form-submit.App-primaryControl', Button.component({\n\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    disabled: this.props.taxonomy.minTerms() && this.selectedTerms.length < this.props.taxonomy.minTerms(),\n                    icon: 'fas fa-check',\n                }, app.translator.trans('flarum-tags.forum.choose_tags.submit_button'))),//TODO\n            ])),\n            m('.Modal-footer', this.availableTerms === null ? LoadingIndicator.component() : m('ul.TagDiscussionModal-list.SelectTagList', availableTerms\n                .map((term, index) => m('li', {\n                    'data-index': index,\n                    className: classList({\n                        colored: !!term.color(),\n                        selected: this.indexInSelectedTerms(term) !== -1,\n                        active: this.activeListIndex === index,\n                    }),\n                    style: {color: term.color()},\n                    onmouseover: () => this.activeListIndex = index,\n                    onclick: this.toggleTerm.bind(this, term),\n                }, [\n                    taxonomyIcon(term),\n                    m('span.SelectTagListItem-name', term.exists ? highlight(term.name(), filter) : app.translator.trans('fof-taxonomies.forum.modal.custom', {\n                        value: m('em', term.name()),\n                    })),\n                    term.description() ? m('span.SelectTagListItem-description', term.description()) : '',\n                ])))),\n        ];\n    }\n\n    toggleTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        this.onready();\n    }\n\n    select(e) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                this.$('form').submit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index) {\n        return this.$(`li[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index, scrollToItem) {\n        const $dropdown = this.$('.TagDiscussionModal-list');\n\n        const indexLength = this.$('.TagDiscussionModal-list > li').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop();\n            const dropdownTop = $dropdown.offset().top;\n            const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n            const itemTop = $item.offset().top;\n            const itemBottom = itemTop + $item.outerHeight();\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event) {\n        event.preventDefault();\n\n        if (this.props.discussion) {\n            this.props.discussion.save({\n                relationships: {\n                    taxonomies: [\n                        {\n                            verbatim: true, // Flarum workaround, handled in addComposerControls\n                            type: 'fof-taxonomies',\n                            id: this.props.taxonomy.id(),\n                            relationships: {\n                                terms: {\n                                    data: this.selectedTerms.map(termToIdentifier),\n                                },\n                            },\n                        },\n                    ],\n                },\n            }).then(() => {\n                if (app.current instanceof DiscussionPage) {\n                    app.current.stream.update();\n                }\n                m.redraw();\n            });\n        }\n\n        if (this.props.onsubmit) this.props.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n\n        m.redraw.strategy('none');\n    }\n}\n","import extract from 'flarum/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\n\n/* global m */\n\nexport default function tagsLabel(terms, attrs = {}) {\n    const children = [];\n    const link = extract(attrs, 'link');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy && taxonomy.showLabel()) {\n            children.push(termLabel(taxonomy, {\n                className: 'TaxonomyParentLabel',\n            }));\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {link}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Dropdown from 'flarum/components/Dropdown';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport sortTerms from '../../common/utils/sortTerms';\n\n/* global m */\n\nexport default class TaxonomyDropdown extends Component {\n    init() {\n        this.termsInitialized = false;\n        this.terms = null;\n    }\n\n    view() {\n        const {taxonomy} = this.props;\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: taxonomy.name() + (this.props.term ? ': ' + this.props.term.name() : ''),\n            onshow: () => {\n                if (!this.termsInitialized) {\n                    this.termsInitialized = true;\n                }\n\n                app.request({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    this.terms = sortTerms(app.store.pushPayload(result));\n\n                    this.terms.forEach(term => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    m.redraw();\n                });\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.props.term === term;\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.props.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }));\n    }\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport IndexPage from 'flarum/components/IndexPage';\nimport DiscussionList from 'flarum/components/DiscussionList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\n\nlet taxonomyFilterTerms = [];\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', items => {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            if (!taxonomy.showFilter()) {\n                return;\n            }\n\n            items.add(taxonomy.uniqueKey(), TaxonomyDropdown.component({\n                taxonomy,\n                term: taxonomyFilterTerms.find(term => {\n                    return term.taxonomy() === taxonomy;\n                }),\n                onchange: term => {\n                    const index = taxonomyFilterTerms.indexOf(term);\n\n                    if (index === -1) {\n                        // Remove any other term from that taxonomy\n                        taxonomyFilterTerms = taxonomyFilterTerms.filter(existingTerm => {\n                            return existingTerm.taxonomy() !== term.taxonomy();\n                        });\n\n                        taxonomyFilterTerms.push(term);\n                    } else {\n                        taxonomyFilterTerms.splice(index, 1);\n                    }\n\n                    app.cache.discussionList.refresh();\n                },\n            }));\n        });\n    });\n\n    extend(DiscussionList.prototype, 'requestParams', function (params) {\n        taxonomyFilterTerms.forEach(term => {\n            params.filter.q = (params.filter.q || '') + ' taxonomy:' + term.taxonomy().slug() + ':' + term.slug();\n        });\n    });\n}\n","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Model from 'flarum/Model';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addModels from '../common/addModels';\n\napp.initializers.add('fof-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addModels();\n\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n});\n","import app from 'flarum/app';\nimport {extend, override} from 'flarum/extend';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport Model from 'flarum/Model';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\n\n/* global m */\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            items.add(taxonomy.uniqueKey(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(new ChooseTaxonomyTermsModal({\n                            taxonomy,\n                            selectedTerms: (this[taxonomy.uniqueKey()] || []).slice(0),\n                            onsubmit: terms => {\n                                this[taxonomy.uniqueKey()] = terms;\n                                this.$('textarea').focus();\n                            },\n                        }));\n                    },\n                }, this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length\n                ? termsLabel(this[taxonomy.uniqueKey()], {\n                    taxonomy,\n                })\n                : m('span.TaxonomyLabel.untagged', app.translator.trans('fof-taxonomies.forum.composer.choose', {\n                    taxonomy: taxonomy.name(),\n                }))\n            ), 10);\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        let callback = original;\n\n        //TODO: this will show the popups backwards I think\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            const count = (this[taxonomy.uniqueKey()] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callback = () => {\n                    app.modal.show(new ChooseTaxonomyTermsModal({\n                        taxonomy,\n                        selectedTags: (this[taxonomy.uniqueKey()] || []).slice(0),\n                        onsubmit: terms => {\n                            this[taxonomy.uniqueKey()] = terms;\n                            callback();\n                        },\n                    }));\n                };\n            }\n        });\n\n        callback();\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        app.store.all('fof-taxonomies').forEach(taxonomy => {\n            if (this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, see below\n                    type: 'fof-taxonomies',\n                    id: taxonomy.id(),\n                    relationships: {\n                        terms: {\n                            data: this[taxonomy.uniqueKey()].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n\n    /**\n     * The way Flarum parses relationships inside of the save() method prevents us from saving data alongside the relation\n     * To work around this, we override this method that will allow us to pass down raw objects directly in the model during save\n     */\n    override(Model, 'getIdentifier', function (original, model) {\n        if (model.verbatim) {\n            delete model.verbatim;\n\n            return model;\n        }\n\n        return original(model);\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            // TODO: permission\n            items.add('taxonomy' + taxonomy.id(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    discussion,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport termsLabel from '../common/helpers/termsLabel';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', termsLabel(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', termsLabel(terms, {link: true}), 5);\n        }\n    });\n}\n"],"sourceRoot":""}