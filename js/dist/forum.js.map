{"version":3,"sources":["webpack://@fof/taxonomies/webpack/bootstrap","webpack://@fof/taxonomies/external \"flarum.core.compat['app']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Model']\"","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/taxonomies/./src/common/utils/sortTaxonomies.js","webpack://@fof/taxonomies/external \"flarum.core.compat['extend']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Button']\"","webpack://@fof/taxonomies/./src/common/helpers/taxonomyIcon.js","webpack://@fof/taxonomies/./src/common/helpers/termLabel.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extract']\"","webpack://@fof/taxonomies/./src/common/models/Term.js","webpack://@fof/taxonomies/./src/common/helpers/termsLabel.js","webpack://@fof/taxonomies/./src/common/utils/sortTerms.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/taxonomies/./src/common/models/Taxonomy.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/taxonomies/./src/common/utils/termToIdentifier.js","webpack://@fof/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/classList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extractText']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/ItemList']\"","webpack://@fof/taxonomies/./src/common/helpers/index.js","webpack://@fof/taxonomies/./src/common/models/index.js","webpack://@fof/taxonomies/./src/common/utils/index.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Component']\"","webpack://@fof/taxonomies/./src/common/addModels.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/UserPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/IndexPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Forum']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/User']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/highlight']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/KeyboardNavigatable']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Dropdown']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/UserControls']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/LinkButton']\"","webpack://@fof/taxonomies/./src/forum/components/ChooseTaxonomyTermsModal.js","webpack://@fof/taxonomies/./src/forum/components/TaxonomyDropdown.js","webpack://@fof/taxonomies/./src/forum/components/UserTaxonomyPage.js","webpack://@fof/taxonomies/./src/forum/components/index.js","webpack://@fof/taxonomies/./src/forum/index.js","webpack://@fof/taxonomies/./src/forum/addComposerControls.js","webpack://@fof/taxonomies/./src/forum/addDiscussionControls.js","webpack://@fof/taxonomies/./src/forum/addIndexFilters.js","webpack://@fof/taxonomies/./src/forum/addLabels.js","webpack://@fof/taxonomies/./src/forum/addPages.js","webpack://@fof/taxonomies/./src/forum/addUserControls.js","webpack://@fof/taxonomies/./src/forum/addUserDirectorySearchType.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","configurable","writable","_inheritsLoose","subClass","superClass","constructor","__proto__","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","termLabel","discussionLink","extract","userLink","tagText","app","translator","trans","tag","Term","taxonomy","showFilter","title","description","href","route","slug","config","routes","fof_user_directory","q","Model","attribute","transformDate","hasOne","tagsLabel","terms","children","showLabel","push","sortTerms","forEach","length","Taxonomy","computed","id","_extends","assign","target","arguments","source","apply","this","getIdentifier","attributes","indexOf","sortTaxonomies","map","termsLabel","filter","helpers","labelsFromMultipleTaxonomiesList","models","utils","termToIdentifier","store","ChooseTaxonomyTermsModal","init","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","props","addTerm","resource","taxonomyTerms","request","method","url","forum","apiEndpoint","then","result","pushPayload","redraw","navigator","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","when","event","preventDefault","indexInSelectedTerms","findIndex","data","type","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","transChoice","filteredAvailableTerms","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","parts","split","RegExp","test","createRecord","maxTerms","content","viewForm","listAvailableTerms","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","onclick","onready","placeholder","extractText","oninput","onkeydown","navigate","onfocus","oninputfocus","onblur","oninputblur","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","setTimeout","e","$element","getDomElement","metaKey","ctrlKey","is","$","submit","dispatchEvent","Event","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","onsubmit","saveResource","modal","close","strategy","save","relationships","verbatim","onsaved","onerror","current","DiscussionPage","stream","update","Modal","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","view","activeTerm","find","Dropdown","buttonClassName","label","onshow","onchange","Component","UserTaxonomyPage","loadUser","param","user","UserPage","components","initializers","extend","DiscussionComposer","show","uniqueKey","focus","override","original","callbacks","resolve","selectedTags","callNextCallback","Promise","shift","showing","taxonomyData","model","DiscussionControls","discussion","IndexPage","all","canSearchDiscussions","params","currentFilterForTaxonomy","routeName","DiscussionList","include","filterTermSlug","DiscussionListItem","DiscussionHero","fofTaxonomiesUser","path","username","UserControls","LinkButton","addModels","extensions","searchTypes","AbstractType","SearchField","TaxonomyTermType","allTerms","resourceType","search","query","suggestions","promises","canSearchUsers","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType","Forum","hasMany","Discussion","User"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 52);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","export default function (taxonomies) {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Button'];","import classList from 'flarum/utils/classList';\n\n/* global m */\n\nexport default function taxonomyIcon(term, attrs = {}, settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import app from 'flarum/app';\nimport extract from 'flarum/utils/extract';\nimport Term from '../models/Term';\nimport taxonomyIcon from './taxonomyIcon';\n\n/* global m */\n\nexport default function termLabel(term, attrs = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n    let tag = 'span';\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        // We need to check for instanceof because this method is also used with a taxonomy passed as a value\n        if (term instanceof Term && term.taxonomy() && term.taxonomy().showFilter()) {\n            if (discussionLink) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n\n            // Only generate user taxonomy links if fof/user-directory is enabled\n            if (userLink && app.routes.fof_user_directory) {\n                attrs.title = term.description() || '';\n                attrs.href = app.route('fof_user_directory', {q: 'taxonomy:' + term.taxonomy().slug() + ':' + term.slug()});\n                attrs.config = m.route;\n                tag = 'a';\n            }\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m(tag, attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","module.exports = flarum.core.compat['utils/extract'];","import Model from 'flarum/Model';\n\nexport default class Term extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne('taxonomy');\n}\n","import extract from 'flarum/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\n\n/* global m */\n\nexport default function tagsLabel(terms, attrs = {}) {\n    const children = [];\n    const discussionLink = extract(attrs, 'discussionLink');\n    const userLink = extract(attrs, 'userLink');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {discussionLink, userLink}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","export default function (terms) {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['components/LoadingIndicator'];","import Model from 'flarum/Model';\nimport computed from 'flarum/utils/computed';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute('type');\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    showLabel = Model.attribute('showLabel');\n    showFilter = Model.attribute('showFilter');\n    allowCustomValues = Model.attribute('allowCustomValues');\n    customValueValidation = Model.attribute('customValueValidation');\n    customValueSlugger = Model.attribute('customValueSlugger');\n    minTerms = Model.attribute('minTerms');\n    maxTerms = Model.attribute('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearchDiscussions = Model.attribute('canSearchDiscussions');\n    canSearchUsers = Model.attribute('canSearchUsers');\n\n    // Used to store the terms on the DiscussionComposer, never visible or part of the DOM\n    uniqueKey = computed('id', id => 'taxonomy' + id);\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/Model';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\n\nexport default function (terms, attrs = {}) {\n    const taxonomies = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), attrs);\n    });\n}\n","module.exports = flarum.core.compat['utils/classList'];","module.exports = flarum.core.compat['utils/extractText'];","module.exports = flarum.core.compat['utils/ItemList'];","import labelsFromMultipleTaxonomiesList from './labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './taxonomyIcon';\nimport termLabel from './termLabel';\nimport termsLabel from './termsLabel';\n\nexport const helpers = {\n    labelsFromMultipleTaxonomiesList,\n    taxonomyIcon,\n    termLabel,\n    termsLabel,\n};\n","import Taxonomy from './Taxonomy';\nimport Term from './Term';\n\nexport const models = {\n    Taxonomy,\n    Term,\n};\n","import sortTaxonomies from './sortTaxonomies';\nimport sortTerms from './sortTerms';\nimport termToIdentifier from './termToIdentifier';\n\nexport const utils = {\n    sortTaxonomies,\n    sortTerms,\n    termToIdentifier,\n};\n","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['Component'];","import app from 'flarum/app';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['fof-taxonomies'] = Taxonomy;\n    app.store.models['fof-taxonomy-terms'] = Term;\n}\n","module.exports = flarum.core.compat['utils/computed'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/UserPage'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['models/User'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['helpers/highlight'];","module.exports = flarum.core.compat['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/DiscussionList'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['components/DiscussionHero'];","module.exports = flarum.core.compat['utils/UserControls'];","module.exports = flarum.core.compat['components/LinkButton'];","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport highlight from 'flarum/helpers/highlight';\nimport classList from 'flarum/utils/classList';\nimport ItemList from 'flarum/utils/ItemList';\nimport extractText from 'flarum/utils/extractText';\nimport KeyboardNavigatable from 'flarum/utils/KeyboardNavigatable';\n\nimport termLabel from '../../common/helpers/termLabel';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport termToIdentifier from '../../common/utils/termToIdentifier';\n\n/* global m */\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a, b) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    init() {\n        super.init();\n\n        this.availableTerms = null; // List of models\n        this.selectedTerms = []; // List of models\n        this.searchFilter = '';\n        this.activeListIndex = 0;\n        this.inputIsFocused = false;\n        this.saving = false;\n\n        if (this.props.selectedTerms) {\n            this.props.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.props.resource) {\n            this.props.resource.taxonomyTerms().forEach(term => {\n                if (term.taxonomy().id() === this.props.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                if (!this.selectedTerms.length) {\n                    return;\n                }\n\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            })\n            .when(event => {\n                // We want to allow selecting with space because it's a common way to select\n                // However this interferes with the ability to enter spaces\n                // So we will have space act as select, but only if nothing is typed yet\n                if (event.key === ' ' && this.searchFilter === '') {\n                    event.preventDefault();\n                    this.select(event);\n\n                    return false;\n                }\n\n                return true;\n            });\n    }\n\n    indexInSelectedTerms(term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.props.resource\n            ? app.translator.trans('fof-taxonomies.forum.modal.title.edit', {\n                taxonomy: this.props.taxonomy.name(),\n                title: m('em', this.props.resource.title ? this.props.resource.title() : this.props.resource.displayName()),\n            })\n            : app.translator.trans('fof-taxonomies.forum.modal.title.new', {\n                taxonomy: this.props.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.props.taxonomy.minTerms() && count < this.props.taxonomy.minTerms()) {\n            const remaining = this.props.taxonomy.minTerms() - count;\n            return app.translator.transChoice('fof-taxonomies.forum.modal.placeholder', remaining, {remaining});\n        } else if (count === 0) {\n            return app.translator.trans('fof-taxonomies.forum.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.props.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.props.taxonomy.customValueValidation();\n                let regex = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('fof-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.props.taxonomy.maxTerms() && this.selectedTerms.length >= this.props.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.props.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.props.taxonomy.minTerms() && this.selectedTerms.length < this.props.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('fof-taxonomies.forum.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        }), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: event => {\n                this.searchFilter = event.target.value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            // Use local methods so that other extensions can extend behaviour\n            onfocus: this.oninputfocus.bind(this),\n            onblur: this.oninputblur.bind(this),\n        }), 10);\n\n        return items;\n    }\n\n    oninputfocus() {\n        this.inputIsFocused = true;\n    }\n\n    oninputblur() {\n        this.inputIsFocused = false;\n    }\n\n    listAvailableTerms(terms) {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term, index) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('fof-taxonomies.forum.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        // Defer re-focusing to next browser draw\n        setTimeout(() => {\n            this.onready();\n        });\n    }\n\n    select(e) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // If nothing matches, the user probably typed text that doesn't match anything\n        // In that case we don't want to submit just yet, but we will delete the text\n        // so that typing enter multiple times does end up submitting\n        if (!$element.length) {\n            this.searchFilter = '';\n            return;\n        }\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                this.$('form').submit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index, scrollToItem) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop();\n            const dropdownTop = $dropdown.offset().top;\n            const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n            const itemTop = $item.offset().top;\n            const itemBottom = itemTop + $item.outerHeight();\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event) {\n        event.preventDefault();\n\n        if (this.props.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.props.onsubmit) this.props.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n\n        m.redraw.strategy('none');\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.props.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, handled in addComposerControls\n                        type: 'fof-taxonomies',\n                        id: this.props.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        if (app.current instanceof DiscussionPage) {\n            app.current.stream.update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Dropdown from 'flarum/components/Dropdown';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\n\n/* global m */\n\nexport default class TaxonomyDropdown extends Component {\n    init() {\n        this.termsInitialized = false;\n        this.terms = null;\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.props.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.terms = app.store.pushPayload(result);\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.props.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.props.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.props.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.props.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.props.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }));\n    }\n}\n","import UserPage from 'flarum/components/UserPage';\nimport sortTaxonomies from '../../common/utils/sortTaxonomies';\nimport termsLabel from '../../common/helpers/termsLabel';\n\n/* global m */\n\nexport default class UserTaxonomyPage extends UserPage {\n    init() {\n        super.init();\n\n        this.loadUser(m.route.param('username'));\n    }\n\n    content() {\n        const terms = this.user.taxonomyTerms();\n\n        if (!terms || !terms.length) {\n            return null;\n        }\n\n        const taxonomies = [];\n\n        terms.forEach(term => {\n            const taxonomy = term.taxonomy();\n\n            if (taxonomies.indexOf(taxonomy) === -1) {\n                taxonomies.push(taxonomy);\n            }\n        });\n\n        return sortTaxonomies(taxonomies).map(taxonomy => [\n            m('h2', taxonomy.name()),\n            termsLabel(terms.filter(term => term.taxonomy() === taxonomy), {userLink: true})\n        ]);\n    }\n}\n","import ChooseTaxonomyTermsModal from './ChooseTaxonomyTermsModal';\nimport TaxonomyDropdown from './TaxonomyDropdown';\nimport UserTaxonomyPage from './UserTaxonomyPage';\n\nexport const components = {\n    ChooseTaxonomyTermsModal,\n    TaxonomyDropdown,\n    UserTaxonomyPage,\n};\n","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport User from 'flarum/models/User';\nimport Model from 'flarum/Model';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addPages from './addPages';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\nexport * from './components';\nexport * from '../common/helpers';\nexport * from '../common/models';\nexport * from '../common/utils';\n\napp.initializers.add('fof-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addPages();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n});\n","import app from 'flarum/app';\nimport {extend, override} from 'flarum/extend';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport Model from 'flarum/Model';\nimport icon from 'flarum/helpers/icon';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\n\n/* global m */\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(new ChooseTaxonomyTermsModal({\n                            taxonomy,\n                            selectedTerms: (this[taxonomy.uniqueKey()] || []).slice(0),\n                            onsubmit: terms => {\n                                this[taxonomy.uniqueKey()] = terms;\n                                this.$('textarea').focus();\n                            },\n                        }));\n                    },\n                }, this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length\n                ? termsLabel(this[taxonomy.uniqueKey()], {\n                    taxonomy,\n                })\n                : m('span.TaxonomyLabel.untagged', [\n                    taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                    app.translator.trans('fof-taxonomies.forum.composer.choose', {\n                        taxonomy: taxonomy.name(),\n                    }),\n                ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            const count = (this[taxonomy.uniqueKey()] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(new ChooseTaxonomyTermsModal({\n                        taxonomy,\n                        selectedTags: (this[taxonomy.uniqueKey()] || []).slice(0),\n                        onsubmit: terms => {\n                            this[taxonomy.uniqueKey()] = terms;\n                            resolve();\n                        },\n                    }));\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift()).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.showing) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        app.forum.taxonomies().forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            if (this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, see below in Model.getIdentifier\n                    type: 'fof-taxonomies',\n                    id: taxonomy.id(),\n                    relationships: {\n                        terms: {\n                            data: this[taxonomy.uniqueKey()].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n\n    /**\n     * The way Flarum parses relationships inside of the save() method prevents us from saving data alongside the relation\n     * To work around this, we override this method that will allow us to pass down raw objects directly in the model during save\n     */\n    override(Model, 'getIdentifier', function (original, model) {\n        if (model.verbatim) {\n            delete model.verbatim;\n\n            return model;\n        }\n\n        return original(model);\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (!discussion.attribute('fofCanEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    resource: discussion,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport IndexPage from 'flarum/components/IndexPage';\nimport DiscussionList from 'flarum/components/DiscussionList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\n\n/* global m */\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            if (!taxonomy.canSearchDiscussions() || !taxonomy.showFilter()) {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: this.params()[taxonomy.slug()],\n                onchange: term => {\n                    const params = this.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    m.route(app.route(this.props.routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(IndexPage.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t.canSearchDiscussions() && t.showFilter()).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionList.prototype, 'requestParams', function (params) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t => t.canSearchDiscussions() && t.showFilter()).forEach(taxonomy => {\n            const filterTermSlug = this.props.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {discussionLink: true}), 5);\n        }\n    });\n}\n","import app from 'flarum/app';\nimport UserTaxonomyPage from './components/UserTaxonomyPage';\n\nexport default function () {\n    app.routes.fofTaxonomiesUser = {\n        path: '/u/:username/taxonomies',\n        component: UserTaxonomyPage.component(),\n    };\n\n    app.route.fofTaxonomiesUser = user => {\n        return app.route('fofTaxonomiesUser', {\n            username: user.username(),\n        });\n    };\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport UserControls from 'flarum/utils/UserControls';\nimport Button from 'flarum/components/Button';\nimport UserPage from 'flarum/components/UserPage';\nimport LinkButton from 'flarum/components/LinkButton';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items, user) {\n        if (!user.attribute('fofCanEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    resource: user,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n\n    extend(UserPage.prototype, 'navItems', function (items) {\n        const userTaxonomiesExist = sortTaxonomies(app.forum.taxonomies()).some(taxonomy => {\n            return taxonomy.type() === 'users';\n        });\n\n        if (!userTaxonomiesExist) {\n            return;\n        }\n\n        items.add(\n            'taxonomies',\n            LinkButton.component({\n                href: app.route.fofTaxonomiesUser(this.user),\n                icon: 'fas fa-tags',\n            }, app.translator.trans('fof-taxonomies.forum.user.nav')),\n            120\n        );\n\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport icon from 'flarum/helpers/icon';\n\n/* global m, flarum */\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        constructor() {\n            super();\n\n            this.allTerms = null;\n        }\n\n        resourceType() {\n            return 'fof-taxonomy-terms';\n        }\n\n        search(query) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises = [];\n\n            app.store.all('fof-taxonomies').forEach(taxonomy => {\n                if (!taxonomy.canSearchUsers() || !taxonomy.showFilter()) {\n                    return;\n                }\n\n                promises.push(app.request({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    const terms = app.store.pushPayload(result);\n\n                    terms.forEach(term => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    this.allTerms.push(...terms);\n                }));\n            });\n\n            return Promise.all(promises);\n        }\n\n        renderKind(term) {\n            return term.taxonomy().name();\n        }\n\n        renderLabel(term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params, resource) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits = params.q.split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items) {\n        items.add('fof-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"sourceRoot":""}