{"version":3,"sources":["webpack://@fof/taxonomies/webpack/bootstrap","webpack://@fof/taxonomies/external \"flarum.core.compat['app']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Model']\"","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/taxonomies/external \"flarum.core.compat['extend']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Button']\"","webpack://@fof/taxonomies/./src/common/utils/sortTaxonomies.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/taxonomies/./src/common/helpers/taxonomyIcon.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/classList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extractText']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/taxonomies/./src/common/utils/sortTerms.js","webpack://@fof/taxonomies/external \"flarum.core.compat['Component']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/taxonomies/./src/common/models/Taxonomy.js","webpack://@fof/taxonomies/./src/common/models/Term.js","webpack://@fof/taxonomies/./src/common/addModels.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extract']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/IndexPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Forum']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/highlight']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/KeyboardNavigatable']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Dropdown']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/taxonomies/./src/common/helpers/termLabel.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/taxonomies/./src/common/utils/termToIdentifier.js","webpack://@fof/taxonomies/./src/forum/components/ChooseTaxonomyTermsModal.js","webpack://@fof/taxonomies/./src/common/helpers/termsLabel.js","webpack://@fof/taxonomies/./src/forum/components/TaxonomyDropdown.js","webpack://@fof/taxonomies/./src/forum/index.js","webpack://@fof/taxonomies/./src/forum/addComposerControls.js","webpack://@fof/taxonomies/./src/forum/addDiscussionControls.js","webpack://@fof/taxonomies/./src/forum/addIndexFilters.js","webpack://@fof/taxonomies/./src/forum/addLabels.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","terms","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","configurable","writable","Taxonomy","Model","attribute","transformDate","computed","id","Term","hasOne","app","store","models","termLabel","link","extract","tagText","translator","trans","taxonomy","title","description","href","route","slug","config","_extends","assign","target","arguments","length","source","apply","this","getIdentifier","attributes","ChooseTaxonomyTermsModal","init","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","props","forEach","addTerm","discussion","taxonomyTerms","request","method","url","forum","apiEndpoint","then","result","pushPayload","redraw","navigator","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","splice","indexInSelectedTerms","findIndex","data","type","push","removeTerm","index","getInstruction","count","minTerms","remaining","transChoice","content","filter","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","indexOf","parts","split","RegExp","test","createRecord","maxTerms","map","onclick","onready","placeholder","extractText","oninput","event","onkeydown","navigate","onfocus","onblur","Button","component","disabled","LoadingIndicator","colored","selected","active","onmouseover","toggleTerm","exists","highlight","e","$element","getDomElement","metaKey","ctrlKey","is","$","submit","dispatchEvent","Event","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","onsubmit","preventDefault","save","relationships","verbatim","termToIdentifier","current","DiscussionPage","stream","update","modal","close","strategy","Modal","tagsLabel","children","showLabel","sortTerms","tag","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","view","activeTerm","find","Dropdown","buttonClassName","label","onshow","onchange","Component","initializers","add","extend","DiscussionComposer","items","sortTaxonomies","uniqueKey","show","focus","termsLabel","override","original","callbacks","resolve","selectedTags","callNextCallback","Promise","shift","setTimeout","showing","taxonomyData","model","DiscussionControls","IndexPage","all","canSearchDiscussions","showFilter","params","currentFilterForTaxonomy","routeName","param","DiscussionList","include","filterTermSlug","q","DiscussionListItem","DiscussionHero","addModels","Forum","hasMany","Discussion"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Button'];","export default function (taxonomies) {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['components/LoadingIndicator'];","import classList from 'flarum/utils/classList';\n\n/* global m */\n\nexport default function taxonomyIcon(term, attrs = {}, settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","module.exports = flarum.core.compat['utils/classList'];","module.exports = flarum.core.compat['utils/extractText'];","module.exports = flarum.core.compat['components/Modal'];","export default function (terms) {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['utils/computed'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import Model from 'flarum/Model';\nimport computed from 'flarum/utils/computed';\n\nexport default class Taxonomy extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    showLabel = Model.attribute('showLabel');\n    showFilter = Model.attribute('showFilter');\n    allowCustomValues = Model.attribute('allowCustomValues');\n    customValueValidation = Model.attribute('customValueValidation');\n    customValueSlugger = Model.attribute('customValueSlugger');\n    minTerms = Model.attribute('minTerms');\n    maxTerms = Model.attribute('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearchDiscussions = Model.attribute('canSearchDiscussions');\n\n    uniqueKey = computed('id', id => 'taxonomy' + id);\n}\n","import Model from 'flarum/Model';\n\nexport default class Term extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne('taxonomy');\n}\n","import app from 'flarum/app';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['fof-taxonomies'] = Taxonomy;\n    app.store.models['fof-taxonomy-terms'] = Term;\n}\n","module.exports = flarum.core.compat['utils/extract'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['helpers/highlight'];","module.exports = flarum.core.compat['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/DiscussionList'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['components/DiscussionHero'];","import app from 'flarum/app';\nimport extract from 'flarum/utils/extract';\nimport taxonomyIcon from './taxonomyIcon';\n\n/* global m */\n\nexport default function termLabel(term, attrs = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const link = extract(attrs, 'link');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        if (link && term.taxonomy()) {\n            attrs.title = term.description() || '';\n            attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n            attrs.config = m.route;\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m((link ? 'a' : 'span'), attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/Model';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport highlight from 'flarum/helpers/highlight';\nimport classList from 'flarum/utils/classList';\nimport extractText from 'flarum/utils/extractText';\nimport KeyboardNavigatable from 'flarum/utils/KeyboardNavigatable';\n\nimport termLabel from '../../common/helpers/termLabel';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport termToIdentifier from '../../common/utils/termToIdentifier';\n\n/* global m */\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a, b) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    init() {\n        super.init();\n\n        this.availableTerms = null; // List of models\n        this.selectedTerms = []; // List of models\n        this.searchFilter = '';\n        this.activeListIndex = 0;\n        this.inputIsFocused = false;\n\n        if (this.props.selectedTerms) {\n            this.props.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.props.discussion) {\n            this.props.discussion.taxonomyTerms().forEach(term => {\n                if (term.taxonomy().id() === this.props.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => this.selectedTerms.splice(this.selectedTerms.length - 1, 1));\n    }\n\n    indexInSelectedTerms(term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'TagDiscussionModal';//TODO\n    }\n\n    title() {\n        return this.props.discussion\n            ? app.translator.trans('fof-taxonomies.forum.modal.title.edit', {\n                taxonomy: this.props.taxonomy.name(),\n                title: m('em', this.props.discussion.title()),\n            })\n            : app.translator.trans('fof-taxonomies.forum.modal.title.new', {\n                taxonomy: this.props.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.props.taxonomy.minTerms() && count < this.props.taxonomy.minTerms()) {\n            const remaining = this.props.taxonomy.minTerms() - count;\n            return app.translator.transChoice('fof-taxonomies.forum.modal.placeholder', remaining, {remaining});\n        }\n\n        return '';\n    }\n\n    content() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.props.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.props.taxonomy.customValueValidation();\n                let regex = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('fof-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.props.taxonomy.maxTerms() && this.selectedTerms.length >= this.props.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return [\n            m('.Modal-body', m('.TagDiscussionModal-form', [\n                m('.TagDiscussionModal-form-input', m('.TagsInput.FormControl', {\n                    className: this.inputIsFocused ? 'focus' : '',\n                }, [\n                    m('span.TagsInput-selected', this.selectedTerms.map(term => {\n                        return m('span.TagsInput-tag', {\n                            onclick: () => {\n                                this.removeTerm(term);\n                                this.onready();\n                            },\n                        }, termLabel(term));\n                    })),\n                    m('input.FormControl', {\n                        placeholder: extractText(this.getInstruction()),\n                        value: this.searchFilter,\n                        oninput: event => {\n                            this.searchFilter = event.target.value;\n                            this.activeListIndex = 0;\n                        },\n                        onkeydown: this.navigator.navigate.bind(this.navigator),\n                        onfocus: () => this.inputIsFocused = true,\n                        onblur: () => this.inputIsFocused = false,\n                    }),\n                ])),\n                m('.TagDiscussionModal-form-submit.App-primaryControl', Button.component({\n\n                    type: 'submit',\n                    className: 'Button Button--primary',\n                    disabled: this.props.taxonomy.minTerms() && this.selectedTerms.length < this.props.taxonomy.minTerms(),\n                    icon: 'fas fa-check',\n                }, app.translator.trans('flarum-tags.forum.choose_tags.submit_button'))),//TODO\n            ])),\n            m('.Modal-footer', this.availableTerms === null ? LoadingIndicator.component() : m('ul.TagDiscussionModal-list.SelectTagList', availableTerms\n                .map((term, index) => m('li', {\n                    'data-index': index,\n                    className: classList({\n                        colored: !!term.color(),\n                        selected: this.indexInSelectedTerms(term) !== -1,\n                        active: this.activeListIndex === index,\n                    }),\n                    style: {color: term.color()},\n                    onmouseover: () => this.activeListIndex = index,\n                    onclick: this.toggleTerm.bind(this, term),\n                }, [\n                    taxonomyIcon(term),\n                    m('span.SelectTagListItem-name', term.exists ? highlight(term.name(), filter) : app.translator.trans('fof-taxonomies.forum.modal.custom', {\n                        value: m('em', term.name()),\n                    })),\n                    term.description() ? m('span.SelectTagListItem-description', term.description()) : '',\n                ])))),\n        ];\n    }\n\n    toggleTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        this.onready();\n    }\n\n    select(e) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                this.$('form').submit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index) {\n        return this.$(`li[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index, scrollToItem) {\n        const $dropdown = this.$('.TagDiscussionModal-list');\n\n        const indexLength = this.$('.TagDiscussionModal-list > li').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop();\n            const dropdownTop = $dropdown.offset().top;\n            const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n            const itemTop = $item.offset().top;\n            const itemBottom = itemTop + $item.outerHeight();\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event) {\n        event.preventDefault();\n\n        if (this.props.discussion) {\n            this.props.discussion.save({\n                relationships: {\n                    taxonomies: [\n                        {\n                            verbatim: true, // Flarum workaround, handled in addComposerControls\n                            type: 'fof-taxonomies',\n                            id: this.props.taxonomy.id(),\n                            relationships: {\n                                terms: {\n                                    data: this.selectedTerms.map(termToIdentifier),\n                                },\n                            },\n                        },\n                    ],\n                },\n            }).then(() => {\n                if (app.current instanceof DiscussionPage) {\n                    app.current.stream.update();\n                }\n                m.redraw();\n\n                app.modal.close();\n            });\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.props.onsubmit) this.props.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n\n        m.redraw.strategy('none');\n    }\n}\n","import extract from 'flarum/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\n\n/* global m */\n\nexport default function tagsLabel(terms, attrs = {}) {\n    const children = [];\n    const link = extract(attrs, 'link');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy && taxonomy.showLabel()) {\n            children.push(termLabel(taxonomy, {\n                className: 'TaxonomyParentLabel',\n            }));\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {link}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Dropdown from 'flarum/components/Dropdown';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\n\n/* global m */\n\nexport default class TaxonomyDropdown extends Component {\n    init() {\n        this.termsInitialized = false;\n        this.terms = null;\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.props.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.terms = app.store.pushPayload(result);\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.props.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.props.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.props.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.props.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.props.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }));\n    }\n}\n","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport Model from 'flarum/Model';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addModels from '../common/addModels';\n\napp.initializers.add('fof-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addModels();\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n});\n","import app from 'flarum/app';\nimport {extend, override} from 'flarum/extend';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport Model from 'flarum/Model';\nimport icon from 'flarum/helpers/icon';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\n\n/* global m */\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            items.add(taxonomy.uniqueKey(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(new ChooseTaxonomyTermsModal({\n                            taxonomy,\n                            selectedTerms: (this[taxonomy.uniqueKey()] || []).slice(0),\n                            onsubmit: terms => {\n                                this[taxonomy.uniqueKey()] = terms;\n                                this.$('textarea').focus();\n                            },\n                        }));\n                    },\n                }, this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length\n                ? termsLabel(this[taxonomy.uniqueKey()], {\n                    taxonomy,\n                })\n                : m('span.TaxonomyLabel.untagged', [\n                    taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                    app.translator.trans('fof-taxonomies.forum.composer.choose', {\n                        taxonomy: taxonomy.name(),\n                    }),\n                ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            const count = (this[taxonomy.uniqueKey()] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(new ChooseTaxonomyTermsModal({\n                        taxonomy,\n                        selectedTags: (this[taxonomy.uniqueKey()] || []).slice(0),\n                        onsubmit: terms => {\n                            this[taxonomy.uniqueKey()] = terms;\n                            resolve();\n                        },\n                    }));\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift()).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.showing) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        app.forum.taxonomies().forEach(taxonomy => {\n            if (this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, see below in Model.getIdentifier\n                    type: 'fof-taxonomies',\n                    id: taxonomy.id(),\n                    relationships: {\n                        terms: {\n                            data: this[taxonomy.uniqueKey()].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n\n    /**\n     * The way Flarum parses relationships inside of the save() method prevents us from saving data alongside the relation\n     * To work around this, we override this method that will allow us to pass down raw objects directly in the model during save\n     */\n    override(Model, 'getIdentifier', function (original, model) {\n        if (model.verbatim) {\n            delete model.verbatim;\n\n            return model;\n        }\n\n        return original(model);\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (!discussion.attribute('fofCanEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            items.add('taxonomy' + taxonomy.id(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    discussion,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport IndexPage from 'flarum/components/IndexPage';\nimport DiscussionList from 'flarum/components/DiscussionList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\n\n/* global m */\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            if (!taxonomy.canSearchDiscussions() || !taxonomy.showFilter()) {\n                return;\n            }\n\n            items.add(taxonomy.uniqueKey(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: this.params()[taxonomy.slug()],\n                onchange: term => {\n                    const params = this.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    m.route(app.route(this.props.routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(IndexPage.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t.showFilter()).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionList.prototype, 'requestParams', function (params) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t.showFilter()).forEach(taxonomy => {\n            const filterTermSlug = this.props.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport termsLabel from '../common/helpers/termsLabel';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', termsLabel(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', termsLabel(terms, {link: true}), 5);\n        }\n    });\n}\n"],"sourceRoot":""}