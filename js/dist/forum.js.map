{"version":3,"sources":["webpack://@fof/taxonomies/webpack/bootstrap","webpack://@fof/taxonomies/external \"flarum.core.compat['app']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Model']\"","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://@fof/taxonomies/external \"flarum.core.compat['extend']\"","webpack://@fof/taxonomies/./src/common/utils/sortTaxonomies.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Button']\"","webpack://@fof/taxonomies/./src/common/helpers/taxonomyIcon.js","webpack://@fof/taxonomies/./src/common/helpers/termLabel.js","webpack://@fof/taxonomies/./src/common/helpers/termsLabel.js","webpack://@fof/taxonomies/./src/common/utils/sortTerms.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extract']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/LoadingIndicator']\"","webpack://@fof/taxonomies/./src/common/models/Taxonomy.js","webpack://@fof/taxonomies/./src/common/models/Term.js","webpack://@fof/taxonomies/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@fof/taxonomies/./src/common/utils/termToIdentifier.js","webpack://@fof/taxonomies/./src/common/helpers/labelsFromMultipleTaxonomiesList.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/classList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/extractText']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/ItemList']\"","webpack://@fof/taxonomies/./src/common/helpers/index.js","webpack://@fof/taxonomies/./src/common/models/index.js","webpack://@fof/taxonomies/./src/common/utils/index.js","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Modal']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['Component']\"","webpack://@fof/taxonomies/./src/common/addModels.js","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/computed']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/icon']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/IndexPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Discussion']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/Forum']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['models/User']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['helpers/highlight']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/KeyboardNavigatable']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/DiscussionControls']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionList']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/Dropdown']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionListItem']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['components/DiscussionHero']\"","webpack://@fof/taxonomies/external \"flarum.core.compat['utils/UserControls']\"","webpack://@fof/taxonomies/./src/forum/components/ChooseTaxonomyTermsModal.js","webpack://@fof/taxonomies/./src/forum/components/TaxonomyDropdown.js","webpack://@fof/taxonomies/./src/forum/components/index.js","webpack://@fof/taxonomies/./src/forum/index.js","webpack://@fof/taxonomies/./src/forum/addComposerControls.js","webpack://@fof/taxonomies/./src/forum/addDiscussionControls.js","webpack://@fof/taxonomies/./src/forum/addIndexFilters.js","webpack://@fof/taxonomies/./src/forum/addLabels.js","webpack://@fof/taxonomies/./src/forum/addUserControls.js","webpack://@fof/taxonomies/./src/forum/addUserDirectorySearchType.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_assertThisInitialized","self","ReferenceError","_defineProperty","obj","configurable","writable","_inheritsLoose","subClass","superClass","constructor","__proto__","taxonomies","slice","sort","a","b","order","taxonomyIcon","term","attrs","settings","hasIcon","icon","useColor","className","classList","style","color","backgroundColor","termLabel","link","extract","tagText","app","translator","trans","taxonomy","title","description","href","route","slug","config","tagsLabel","terms","children","showLabel","push","sortTerms","forEach","tag","length","Taxonomy","Model","attribute","transformDate","computed","id","Term","hasOne","_extends","assign","target","arguments","source","apply","this","getIdentifier","attributes","indexOf","sortTaxonomies","map","termsLabel","filter","helpers","labelsFromMultipleTaxonomiesList","models","utils","termToIdentifier","store","ChooseTaxonomyTermsModal","init","availableTerms","selectedTerms","searchFilter","activeListIndex","inputIsFocused","saving","props","addTerm","resource","taxonomyTerms","request","method","url","forum","apiEndpoint","then","result","pushPayload","redraw","navigator","KeyboardNavigatable","onUp","setIndex","onDown","onSelect","select","onRemove","toggleTerm","indexInSelectedTerms","findIndex","data","type","removeTerm","index","splice","displayName","getInstruction","count","minTerms","remaining","transChoice","filteredAvailableTerms","toLowerCase","substr","allowCustomValues","some","validation","customValueValidation","regex","parts","split","RegExp","test","createRecord","maxTerms","content","viewForm","listAvailableTerms","formItems","toArray","items","ItemList","add","inputItems","Button","component","disabled","loading","onclick","onready","placeholder","extractText","oninput","event","onkeydown","navigate","onfocus","onblur","strategy","setTimeout","LoadingIndicator","listAvailableTerm","colored","selected","active","onmouseover","exists","highlight","e","$element","getDomElement","metaKey","ctrlKey","is","$","submit","dispatchEvent","Event","scrollToItem","$dropdown","indexLength","$item","scrollTop","dropdownScroll","dropdownTop","offset","top","dropdownBottom","outerHeight","itemTop","itemBottom","parseInt","css","stop","animate","onsubmit","preventDefault","saveResource","modal","close","save","relationships","verbatim","onsaved","onerror","current","DiscussionPage","stream","update","Modal","TaxonomyDropdown","termsInitialized","activeTermSlug","loadTerms","pushData","view","activeTerm","find","Dropdown","buttonClassName","label","onshow","onchange","Component","components","initializers","extend","DiscussionComposer","show","uniqueKey","focus","override","original","callbacks","resolve","selectedTags","callNextCallback","Promise","shift","showing","taxonomyData","model","DiscussionControls","discussion","IndexPage","all","canSearchDiscussions","showFilter","params","currentFilterForTaxonomy","routeName","param","DiscussionList","include","filterTermSlug","q","DiscussionListItem","DiscussionHero","UserControls","user","addModels","extensions","searchTypes","AbstractType","SearchField","TaxonomyTermType","allTerms","resourceType","search","query","suggestions","promises","canSearchUsers","renderKind","renderLabel","applyFilter","initializeFromParams","gambits","word","gambit","addUserDirectorySearchType","Forum","hasMany","Discussion","User"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 49);\n","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['extend'];","export default function (taxonomies) {\n    // Special case for when retrieving an empty relationship from the store\n    if (taxonomies === false) {\n        taxonomies = [];\n    }\n\n    return taxonomies.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['components/Button'];","import classList from 'flarum/utils/classList';\n\n/* global m */\n\nexport default function taxonomyIcon(term, attrs = {}, settings = {}) {\n    const hasIcon = term && term.icon();\n    const {useColor = true} = settings;\n\n    attrs.className = classList([\n        attrs.className,\n        'icon',\n        hasIcon ? term.icon() : 'TaxonomyIcon',\n    ]);\n\n    if (term) {\n        attrs.style = attrs.style || {};\n\n        if (hasIcon) {\n            attrs.style.color = useColor ? term.color() : '';\n        } else {\n            attrs.style.backgroundColor = term.color();\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return hasIcon ? m('i', attrs) : m('span', attrs);\n}\n","import app from 'flarum/app';\nimport extract from 'flarum/utils/extract';\nimport taxonomyIcon from './taxonomyIcon';\n\n/* global m */\n\nexport default function termLabel(term, attrs = {}) {\n    attrs.style = attrs.style || {};\n    attrs.className = 'TaxonomyLabel ' + (attrs.className || '');\n\n    const link = extract(attrs, 'link');\n    const tagText = term ? term.name() : app.translator.trans('flarum-tags.lib.deleted_tag_text');\n\n    if (term) {\n        const color = term.color();\n        if (color) {\n            attrs.style.backgroundColor = attrs.style.color = color;\n            attrs.className += ' colored';\n        }\n\n        if (link && term.taxonomy()) {\n            attrs.title = term.description() || '';\n            attrs.href = app.route('index', {[term.taxonomy().slug()]: term.slug()});\n            attrs.config = m.route;\n        }\n    } else {\n        attrs.className += ' untagged';\n    }\n\n    return m((link ? 'a' : 'span'), attrs, m('span.TaxonomyLabel-text', [\n        term && term.icon() && taxonomyIcon(term, {}, {useColor: false}),\n        ' ' + tagText,\n    ]));\n}\n","import extract from 'flarum/utils/extract';\nimport termLabel from './termLabel';\nimport sortTerms from '../utils/sortTerms';\n\n/* global m */\n\nexport default function tagsLabel(terms, attrs = {}) {\n    const children = [];\n    const link = extract(attrs, 'link');\n\n    attrs.className = 'TaxonomiesLabel ' + (attrs.className || '');\n\n    if (terms) {\n        let taxonomy = extract(attrs, 'taxonomy');\n\n        if (!taxonomy) {\n            taxonomy = terms[0].taxonomy();\n        }\n\n        if (taxonomy) {\n            attrs['data-slug'] = taxonomy.slug();\n\n            if (taxonomy.showLabel()) {\n                children.push(termLabel(taxonomy, {\n                    className: 'TaxonomyParentLabel',\n                }));\n            }\n        }\n\n        sortTerms(terms).forEach(tag => {\n            if (tag || terms.length === 1) {\n                children.push(termLabel(tag, {link}));\n            }\n        });\n    } else {\n        children.push(termLabel());\n    }\n\n    return m('span', attrs, children);\n}\n","export default function (terms) {\n    return terms.slice(0).sort((a, b) => {\n        const order = a.order() - b.order();\n\n        if (order !== 0) {\n            return order;\n        }\n\n        if (a.name() > b.name()) {\n            return 1;\n        }\n\n        if (a.name() < b.name()) {\n            return -1;\n        }\n\n        return 0;\n    });\n}\n","module.exports = flarum.core.compat['utils/extract'];","module.exports = flarum.core.compat['components/LoadingIndicator'];","import Model from 'flarum/Model';\nimport computed from 'flarum/utils/computed';\n\nexport default class Taxonomy extends Model {\n    type = Model.attribute('type');\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    showLabel = Model.attribute('showLabel');\n    showFilter = Model.attribute('showFilter');\n    allowCustomValues = Model.attribute('allowCustomValues');\n    customValueValidation = Model.attribute('customValueValidation');\n    customValueSlugger = Model.attribute('customValueSlugger');\n    minTerms = Model.attribute('minTerms');\n    maxTerms = Model.attribute('maxTerms');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n    canSearchDiscussions = Model.attribute('canSearchDiscussions');\n    canSearchUsers = Model.attribute('canSearchUsers');\n\n    // Used to store the terms on the DiscussionComposer, never visible or part of the DOM\n    uniqueKey = computed('id', id => 'taxonomy' + id);\n}\n","import Model from 'flarum/Model';\n\nexport default class Term extends Model {\n    name = Model.attribute('name');\n    slug = Model.attribute('slug');\n    description = Model.attribute('description');\n    color = Model.attribute('color');\n    icon = Model.attribute('icon');\n    order = Model.attribute('order');\n    createdAt = Model.attribute('createdAt', Model.transformDate);\n\n    taxonomy = Model.hasOne('taxonomy');\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import Model from 'flarum/Model';\n\n/**\n * Prepares a model for a relationship payload\n * We need to keep the name value for custom terms\n */\nexport default function (term) {\n    if (term.id()) {\n        return Model.getIdentifier(term);\n    }\n\n    return {\n        ...Model.getIdentifier(term),\n        attributes: {\n            name: term.name(),\n        },\n    }\n}\n","import sortTaxonomies from '../utils/sortTaxonomies';\nimport termsLabel from './termsLabel';\n\nexport default function (terms, attrs = {}) {\n    const taxonomies = [];\n\n    terms.forEach(term => {\n        const taxonomy = term.taxonomy();\n\n        if (taxonomies.indexOf(taxonomy) === -1) {\n            taxonomies.push(taxonomy);\n        }\n    });\n\n    return sortTaxonomies(taxonomies).map(taxonomy => {\n        return termsLabel(terms.filter(term => term.taxonomy() === taxonomy), attrs);\n    });\n}\n","module.exports = flarum.core.compat['utils/classList'];","module.exports = flarum.core.compat['utils/extractText'];","module.exports = flarum.core.compat['utils/ItemList'];","import labelsFromMultipleTaxonomiesList from './labelsFromMultipleTaxonomiesList';\nimport taxonomyIcon from './taxonomyIcon';\nimport termLabel from './termLabel';\nimport termsLabel from './termsLabel';\n\nexport const helpers = {\n    labelsFromMultipleTaxonomiesList,\n    taxonomyIcon,\n    termLabel,\n    termsLabel,\n};\n","import Taxonomy from './Taxonomy';\nimport Term from './Term';\n\nexport const models = {\n    Taxonomy,\n    Term,\n};\n","import sortTaxonomies from './sortTaxonomies';\nimport sortTerms from './sortTerms';\nimport termToIdentifier from './termToIdentifier';\n\nexport const utils = {\n    sortTaxonomies,\n    sortTerms,\n    termToIdentifier,\n};\n","module.exports = flarum.core.compat['components/Modal'];","module.exports = flarum.core.compat['Component'];","import app from 'flarum/app';\nimport Taxonomy from './models/Taxonomy';\nimport Term from './models/Term';\n\nexport default function () {\n    app.store.models['fof-taxonomies'] = Taxonomy;\n    app.store.models['fof-taxonomy-terms'] = Term;\n}\n","module.exports = flarum.core.compat['utils/computed'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['models/Forum'];","module.exports = flarum.core.compat['models/User'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['helpers/highlight'];","module.exports = flarum.core.compat['utils/KeyboardNavigatable'];","module.exports = flarum.core.compat['utils/DiscussionControls'];","module.exports = flarum.core.compat['components/DiscussionList'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/DiscussionListItem'];","module.exports = flarum.core.compat['components/DiscussionHero'];","module.exports = flarum.core.compat['utils/UserControls'];","import app from 'flarum/app';\nimport Modal from 'flarum/components/Modal';\nimport DiscussionPage from 'flarum/components/DiscussionPage';\nimport Button from 'flarum/components/Button';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\nimport highlight from 'flarum/helpers/highlight';\nimport classList from 'flarum/utils/classList';\nimport ItemList from 'flarum/utils/ItemList';\nimport extractText from 'flarum/utils/extractText';\nimport KeyboardNavigatable from 'flarum/utils/KeyboardNavigatable';\n\nimport termLabel from '../../common/helpers/termLabel';\nimport taxonomyIcon from '../../common/helpers/taxonomyIcon';\nimport termToIdentifier from '../../common/utils/termToIdentifier';\n\n/* global m */\n\n/**\n * Comparing objects directly is unreliable because we will be creating some new records as well\n * So we use this method to do a proper deep check\n */\nfunction isSameTerm(a, b) {\n    if (a.data.type !== b.data.type) {\n        return false;\n    }\n\n    // If both have an ID and it's different\n    if (a.id() && b.id()) {\n        return a.id() === b.id();\n    }\n\n    // If only one has an ID, it's different\n    if (!a.id() !== !b.id()) {\n        return false;\n    }\n\n    // If both don't have an ID, it's a new value and we compare the name\n    return a.name() === b.name();\n}\n\n/**\n * Based on Flarum's TagDiscussionModal\n */\nexport default class ChooseTaxonomyTermsModal extends Modal {\n    init() {\n        super.init();\n\n        this.availableTerms = null; // List of models\n        this.selectedTerms = []; // List of models\n        this.searchFilter = '';\n        this.activeListIndex = 0;\n        this.inputIsFocused = false;\n        this.saving = false;\n\n        if (this.props.selectedTerms) {\n            this.props.selectedTerms.forEach(this.addTerm.bind(this));\n        } else if (this.props.resource) {\n            this.props.resource.taxonomyTerms().forEach(term => {\n                if (term.taxonomy().id() === this.props.taxonomy.id()) {\n                    this.addTerm(term);\n                }\n            });\n        }\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.availableTerms = app.store.pushPayload(result);\n\n            m.redraw();\n        });\n\n        this.navigator = new KeyboardNavigatable();\n        this.navigator\n            .onUp(() => this.setIndex(this.activeListIndex - 1, true))\n            .onDown(() => this.setIndex(this.activeListIndex + 1, true))\n            .onSelect(this.select.bind(this))\n            .onRemove(() => {\n                this.toggleTerm(this.selectedTerms[this.selectedTerms.length - 1]);\n            });\n    }\n\n    indexInSelectedTerms(term) {\n        return this.selectedTerms.findIndex(t => isSameTerm(t, term));\n    }\n\n    addTerm(term) {\n        this.selectedTerms.push(term);\n    }\n\n    removeTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.selectedTerms.splice(index, 1);\n        }\n    }\n\n    className() {\n        return 'ChooseTaxonomyTermsModal';\n    }\n\n    title() {\n        return this.props.resource\n            ? app.translator.trans('fof-taxonomies.forum.modal.title.edit', {\n                taxonomy: this.props.taxonomy.name(),\n                title: m('em', this.props.resource.title ? this.props.resource.title() : this.props.resource.displayName()),\n            })\n            : app.translator.trans('fof-taxonomies.forum.modal.title.new', {\n                taxonomy: this.props.taxonomy.name(),\n            });\n    }\n\n    getInstruction() {\n        const count = this.selectedTerms.length;\n\n        if (this.props.taxonomy.minTerms() && count < this.props.taxonomy.minTerms()) {\n            const remaining = this.props.taxonomy.minTerms() - count;\n            return app.translator.transChoice('fof-taxonomies.forum.modal.placeholder', remaining, {remaining});\n        } else if (count === 0) {\n            return app.translator.trans('fof-taxonomies.forum.modal.placeholderOptional');\n        }\n\n        return '';\n    }\n\n    filteredAvailableTerms() {\n        let availableTerms = this.availableTerms === null ? [] : this.availableTerms;\n        const filter = this.searchFilter.toLowerCase();\n\n        if (filter) {\n            availableTerms = availableTerms.filter(term => term.name().substr(0, filter.length).toLowerCase() === filter);\n\n            if (\n                this.props.taxonomy.allowCustomValues() &&\n                !availableTerms.some(term => term.name().toLowerCase() === filter)\n            ) {\n                const validation = this.props.taxonomy.customValueValidation();\n                let regex = null;\n\n                if (validation === 'alpha_num') {\n                    regex = /^[a-z0-9]$/i;\n                } else if (validation === 'alpha_dash') {\n                    regex = /^[a-z0-9_-]$/i;\n                } else if (validation.indexOf('/') === 0) {\n                    const parts = validation.split('/');\n                    if (parts.length === 3) {\n                        regex = new RegExp(parts[1], parts[2]);\n                    }\n                }\n\n                if (!regex || regex.test(this.searchFilter)) {\n                    availableTerms.push(app.store.createRecord('fof-taxonomy-terms', {\n                        attributes: {\n                            name: this.searchFilter,\n                        },\n                    }));\n                }\n            }\n        }\n\n        if (this.props.taxonomy.maxTerms() && this.selectedTerms.length >= this.props.taxonomy.maxTerms()) {\n            availableTerms = [];\n        }\n\n        return availableTerms;\n    }\n\n    content() {\n        return [\n            this.viewForm(),\n            this.listAvailableTerms(this.filteredAvailableTerms()),\n        ];\n    }\n\n    viewForm() {\n        const description = this.props.taxonomy.description();\n\n        return m('.Modal-body', [\n            description ? m('p', description) : null,\n            m('.ChooseTaxonomyTermsModal-form', this.formItems().toArray()),\n        ]);\n    }\n\n    formItems() {\n        const items = new ItemList();\n\n        items.add('input', m('.ChooseTaxonomyTermsModal-form-input', m('.TermsInput.FormControl', {\n            className: this.inputIsFocused ? 'focus' : '',\n        }, this.inputItems().toArray())), 20);\n\n        items.add('submit', m('.ChooseTaxonomyTermsModal-form-submit.App-primaryControl', Button.component({\n            type: 'submit',\n            className: 'Button Button--primary',\n            disabled: this.props.taxonomy.minTerms() && this.selectedTerms.length < this.props.taxonomy.minTerms(),\n            icon: 'fas fa-check',\n            loading: this.saving,\n        }, app.translator.trans('fof-taxonomies.forum.modal.submit'))), 10);\n\n        return items;\n    }\n\n    inputItems() {\n        const items = new ItemList();\n\n        items.add('selected', m('span.TermsInput-selected', this.selectedTerms.map(term => {\n            return m('span.TermsInput-term', {\n                onclick: () => {\n                    this.toggleTerm(term);\n                    this.onready();\n                },\n            }, termLabel(term));\n        })), 20);\n\n        items.add('control', m('input.FormControl', {\n            placeholder: extractText(this.getInstruction()),\n            value: this.searchFilter,\n            oninput: event => {\n                this.searchFilter = event.target.value;\n                this.activeListIndex = 0;\n            },\n            onkeydown: this.navigator.navigate.bind(this.navigator),\n            onfocus: () => this.inputIsFocused = true,\n            onblur: () => {\n                // We delay the redraw so that clicking something doesn't immediately removes the focus\n                // This isn't necessary for the features bundled in the extension, but necessary for the\n                // Dropdown variation of this component that can be implemented by other extensions\n                m.redraw.strategy('none');\n\n                this.inputIsFocused = false;\n\n                setTimeout(() => {\n                    m.redraw();\n                }, 100);\n            },\n        }), 10);\n\n        return items;\n    }\n\n    listAvailableTerms(terms) {\n        return m('.Modal-footer', this.availableTerms === null ?\n            LoadingIndicator.component() :\n            m('ul.ChooseTaxonomyTermsModal-list.SelectTermList', terms.map(this.listAvailableTerm.bind(this)))\n        );\n    }\n\n    listAvailableTerm(term, index) {\n        return m('li.SelectTermListItem', {\n            'data-index': index,\n            className: classList({\n                colored: !!term.color(),\n                selected: this.indexInSelectedTerms(term) !== -1,\n                active: this.activeListIndex === index,\n            }),\n            style: {color: term.color()},\n            onmouseover: () => this.activeListIndex = index,\n            onclick: this.toggleTerm.bind(this, term),\n        }, [\n            taxonomyIcon(term),\n            m('span.SelectTermListItem-name', term.exists ? highlight(term.name(), this.searchFilter) : app.translator.trans('fof-taxonomies.forum.modal.custom', {\n                value: m('em', term.name()),\n            })),\n            term.description() ? m('span.SelectTermListItem-description', term.description()) : '',\n        ]);\n    }\n\n    toggleTerm(term) {\n        const index = this.indexInSelectedTerms(term);\n\n        if (index !== -1) {\n            this.removeTerm(term);\n        } else {\n            this.addTerm(term);\n        }\n\n        if (this.searchFilter) {\n            this.searchFilter = '';\n            this.activeListIndex = 0;\n        }\n\n        this.onready();\n    }\n\n    select(e) {\n        const $element = this.getDomElement(this.activeListIndex);\n\n        // Ctrl + Enter submits the selection, just Enter completes the current entry\n        if (e.metaKey || e.ctrlKey || $element.is('.selected')) {\n            if (this.selectedTerms.length) {\n                this.$('form').submit();\n            }\n        } else {\n            $element[0].dispatchEvent(new Event('click'));\n        }\n    }\n\n    getDomElement(index) {\n        return this.$(`.SelectTermListItem[data-index=\"${index}\"]`);\n    }\n\n    setIndex(index, scrollToItem) {\n        const $dropdown = this.$('.ChooseTaxonomyTermsModal-list');\n\n        const indexLength = this.$('.SelectTermListItem').length;\n\n        if (index < 0) {\n            index = indexLength - 1;\n        } else if (index >= indexLength) {\n            index = 0;\n        }\n\n        const $item = this.getDomElement(index);\n        this.activeListIndex = index;\n\n        m.redraw();\n\n        if (scrollToItem) {\n            const dropdownScroll = $dropdown.scrollTop();\n            const dropdownTop = $dropdown.offset().top;\n            const dropdownBottom = dropdownTop + $dropdown.outerHeight();\n            const itemTop = $item.offset().top;\n            const itemBottom = itemTop + $item.outerHeight();\n\n            let scrollTop;\n            if (itemTop < dropdownTop) {\n                scrollTop = dropdownScroll - dropdownTop + itemTop - parseInt($dropdown.css('padding-top'), 10);\n            } else if (itemBottom > dropdownBottom) {\n                scrollTop = dropdownScroll - dropdownBottom + itemBottom + parseInt($dropdown.css('padding-bottom'), 10);\n            }\n\n            if (typeof scrollTop !== 'undefined') {\n                $dropdown.stop(true).animate({scrollTop}, 100);\n            }\n        }\n    }\n\n    onsubmit(event) {\n        event.preventDefault();\n\n        if (this.props.resource) {\n            this.saveResource();\n\n            // Do not run the normal code - it might close the modal even if an error occurred\n            return;\n        }\n\n        if (this.props.onsubmit) this.props.onsubmit(this.selectedTerms);\n\n        app.modal.close();\n\n        m.redraw.strategy('none');\n    }\n\n    saveResource() {\n        this.saving = true;\n\n        this.props.resource.save({\n            relationships: {\n                taxonomies: [\n                    {\n                        verbatim: true, // Flarum workaround, handled in addComposerControls\n                        type: 'fof-taxonomies',\n                        id: this.props.taxonomy.id(),\n                        relationships: {\n                            terms: {\n                                data: this.selectedTerms.map(termToIdentifier),\n                            },\n                        },\n                    },\n                ],\n            },\n        }).then(this.onsaved.bind(this), this.onerror.bind(this));\n    }\n\n    onsaved() {\n        if (app.current instanceof DiscussionPage) {\n            app.current.stream.update();\n        }\n        this.saving = false;\n        m.redraw();\n\n        app.modal.close();\n    }\n\n    onerror() {\n        this.saving = false;\n        m.redraw();\n    }\n}\n","import app from 'flarum/app';\nimport Component from 'flarum/Component';\nimport Button from 'flarum/components/Button';\nimport Dropdown from 'flarum/components/Dropdown';\nimport LoadingIndicator from 'flarum/components/LoadingIndicator';\n\n/* global m */\n\nexport default class TaxonomyDropdown extends Component {\n    init() {\n        this.termsInitialized = false;\n        this.terms = null;\n\n        // If a term is active while the component inits, we're probably loading a page with pre-loaded filters\n        // We could retrieve the term from the store if it is present on discussion results\n        // But it's unreliable since a page with no results wouldn't have it but we want to show the term in the dropdown\n        if (this.props.activeTermSlug) {\n            this.loadTerms();\n        }\n    }\n\n    loadTerms() {\n        if (this.termsInitialized) {\n            return;\n        }\n\n        this.termsInitialized = true;\n\n        app.request({\n            method: 'GET',\n            url: app.forum.attribute('apiUrl') + this.props.taxonomy.apiEndpoint() + '/terms',\n        }).then(result => {\n            this.terms = app.store.pushPayload(result);\n\n            this.terms.forEach(term => {\n                term.pushData({\n                    relationships: {\n                        taxonomy: this.props.taxonomy,\n                    },\n                });\n            });\n\n            m.redraw();\n        });\n    }\n\n    view() {\n        let activeTerm = this.terms && this.terms.find(t => t.slug() === this.props.activeTermSlug);\n\n        return Dropdown.component({\n            buttonClassName: 'Button',\n            label: this.props.taxonomy.name() + (activeTerm ? ': ' + activeTerm.name() : ''),\n            onshow: () => {\n                this.loadTerms();\n            },\n        }, this.terms === null ? [\n            LoadingIndicator.component(),\n        ] : this.terms.map(term => {\n            const active = this.props.activeTermSlug === term.slug();\n\n            return Button.component({\n                icon: active ? 'fas fa-check' : true,\n                onclick: () => this.props.onchange(term),\n                active, // Remove after https://github.com/flarum/core/issues/2265\n            }, term.name());\n        }));\n    }\n}\n","import ChooseTaxonomyTermsModal from './ChooseTaxonomyTermsModal';\nimport TaxonomyDropdown from './TaxonomyDropdown';\n\nexport const components = {\n    ChooseTaxonomyTermsModal,\n    TaxonomyDropdown,\n};\n","import app from 'flarum/app';\nimport Discussion from 'flarum/models/Discussion';\nimport Forum from 'flarum/models/Forum';\nimport User from 'flarum/models/User';\nimport Model from 'flarum/Model';\nimport addComposerControls from './addComposerControls';\nimport addDiscussionControls from './addDiscussionControls';\nimport addIndexFilters from './addIndexFilters';\nimport addLabels from './addLabels';\nimport addUserControls from './addUserControls';\nimport addModels from '../common/addModels';\nimport addUserDirectorySearchType from './addUserDirectorySearchType';\n\nexport * from './components';\nexport * from '../common/helpers';\nexport * from '../common/models';\nexport * from '../common/utils';\n\napp.initializers.add('fof-taxonomies', () => {\n    addComposerControls();\n    addDiscussionControls();\n    addIndexFilters();\n    addLabels();\n    addUserControls();\n    addModels();\n    addUserDirectorySearchType();\n\n    Forum.prototype.taxonomies = Model.hasMany('taxonomies');\n    Discussion.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n    User.prototype.taxonomyTerms = Model.hasMany('taxonomyTerms');\n});\n","import app from 'flarum/app';\nimport {extend, override} from 'flarum/extend';\nimport DiscussionComposer from 'flarum/components/DiscussionComposer';\nimport Model from 'flarum/Model';\nimport icon from 'flarum/helpers/icon';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport termsLabel from '../common/helpers/termsLabel';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport termToIdentifier from '../common/utils/termToIdentifier';\n\n/* global m */\n\nexport default function () {\n    extend(DiscussionComposer.prototype, 'headerItems', function (items) {\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), m('a.DiscussionComposer-changeTaxonomies', {\n                    onclick: () => {\n                        app.modal.show(new ChooseTaxonomyTermsModal({\n                            taxonomy,\n                            selectedTerms: (this[taxonomy.uniqueKey()] || []).slice(0),\n                            onsubmit: terms => {\n                                this[taxonomy.uniqueKey()] = terms;\n                                this.$('textarea').focus();\n                            },\n                        }));\n                    },\n                }, this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length\n                ? termsLabel(this[taxonomy.uniqueKey()], {\n                    taxonomy,\n                })\n                : m('span.TaxonomyLabel.untagged', [\n                    taxonomy.icon() ? [icon(taxonomy.icon()), ' '] : null,\n                    app.translator.trans('fof-taxonomies.forum.composer.choose', {\n                        taxonomy: taxonomy.name(),\n                    }),\n                ])\n            ), 9); // Tags uses 10, we add ours right to the tagson the right of the tags\n        });\n    });\n\n    override(DiscussionComposer.prototype, 'onsubmit', function (original) {\n        // Zero timeout to change the execution thread and let the modal close in TagDiscussionModal / ChooseTaxonomyTermsModal\n        // before we try opening another one\n        const callbacks = [];\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            const count = (this[taxonomy.uniqueKey()] || []).length;\n\n            if (taxonomy.minTerms() && count < taxonomy.minTerms()) {\n                callbacks.push(resolve => {\n                    app.modal.show(new ChooseTaxonomyTermsModal({\n                        taxonomy,\n                        selectedTags: (this[taxonomy.uniqueKey()] || []).slice(0),\n                        onsubmit: terms => {\n                            this[taxonomy.uniqueKey()] = terms;\n                            resolve();\n                        },\n                    }));\n                });\n            }\n        });\n\n        if (callbacks.length) {\n            const callNextCallback = () => {\n                if (!callbacks.length) {\n                    original();\n\n                    return;\n                }\n\n                new Promise(callbacks.shift()).then(() => {\n                    // We give time for the modal to close before opening another one\n                    // Opening a different modal without closing the first one is very difficult because app.modal.show\n                    // Would have to be called in the same thread that just called app.modal.close and it's very difficult\n                    // We also apply that delay after our last modal in case Tags' modal shows up after ours\n                    setTimeout(() => {\n                        callNextCallback();\n                    }, 400); // 300ms is bootstrap's default Modal.TRANSITION_DURATION and we add a bit of delay\n                });\n            }\n\n            if (app.modal.showing) {\n                // In case Tags' modal is currently visible (their override ran before ours) we wait for it to close\n                // We have no other option because our override is called from TagDiscussionModal.props.onsubmit\n                // at which point app.modal.close has not been called yet\n                setTimeout(() => {\n                    callNextCallback();\n                }, 400);\n            } else {\n                callNextCallback();\n            }\n        } else {\n            original();\n        }\n    });\n\n    extend(DiscussionComposer.prototype, 'data', function (data) {\n        const taxonomyData = [];\n\n        // We put all term IDs from all taxonomies together for the request\n        app.forum.taxonomies().forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            if (this[taxonomy.uniqueKey()] && this[taxonomy.uniqueKey()].length) {\n                taxonomyData.push({\n                    verbatim: true, // Flarum workaround, see below in Model.getIdentifier\n                    type: 'fof-taxonomies',\n                    id: taxonomy.id(),\n                    relationships: {\n                        terms: {\n                            data: this[taxonomy.uniqueKey()].map(termToIdentifier),\n                        },\n                    },\n                });\n            }\n        });\n\n        data.relationships = data.relationships || {};\n        data.relationships.taxonomies = taxonomyData;\n    });\n\n    /**\n     * The way Flarum parses relationships inside of the save() method prevents us from saving data alongside the relation\n     * To work around this, we override this method that will allow us to pass down raw objects directly in the model during save\n     */\n    override(Model, 'getIdentifier', function (original, model) {\n        if (model.verbatim) {\n            delete model.verbatim;\n\n            return model;\n        }\n\n        return original(model);\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport DiscussionControls from 'flarum/utils/DiscussionControls';\nimport Button from 'flarum/components/Button';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(DiscussionControls, 'moderationControls', function (items, discussion) {\n        if (!discussion.attribute('fofCanEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'discussions') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    resource: discussion,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.discussion.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport IndexPage from 'flarum/components/IndexPage';\nimport DiscussionList from 'flarum/components/DiscussionList';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\nimport TaxonomyDropdown from './components/TaxonomyDropdown';\n\n/* global m */\n\nexport default function () {\n    extend(IndexPage.prototype, 'viewItems', function (items) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).forEach(taxonomy => {\n            if (!taxonomy.canSearchDiscussions() || !taxonomy.showFilter()) {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), TaxonomyDropdown.component({\n                taxonomy,\n                activeTermSlug: this.params()[taxonomy.slug()],\n                onchange: term => {\n                    const params = this.params();\n\n                    const currentFilterForTaxonomy = params[taxonomy.slug()];\n\n                    if (term.slug() === currentFilterForTaxonomy) {\n                        delete params[taxonomy.slug()];\n                    } else {\n                        params[taxonomy.slug()] = term.slug();\n                    }\n\n                    m.route(app.route(this.props.routeName, params));\n                },\n            }));\n        });\n    });\n\n    extend(IndexPage.prototype, 'stickyParams', function (params) {\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t.canSearchDiscussions() && t.showFilter()).forEach(taxonomy => {\n            params[taxonomy.slug()] = m.route.param(taxonomy.slug());\n        });\n    });\n\n    extend(DiscussionList.prototype, 'requestParams', function (params) {\n        // Include the taxonomies when navigating to the discussion list\n        // Same includes are pre-loaded in DiscussionAttributes.php\n        params.include.push('taxonomyTerms', 'taxonomyTerms.taxonomy');\n\n        sortTaxonomies(app.store.all('fof-taxonomies')).filter(t => t => t.canSearchDiscussions() && t.showFilter()).forEach(taxonomy => {\n            const filterTermSlug = this.props.params[taxonomy.slug()];\n\n            if (filterTermSlug) {\n                params.filter.q = (params.filter.q || '') + ' taxonomy:' + taxonomy.slug() + ':' + filterTermSlug;\n            }\n        });\n    });\n}\n","import {extend} from 'flarum/extend';\nimport DiscussionListItem from 'flarum/components/DiscussionListItem';\nimport DiscussionHero from 'flarum/components/DiscussionHero';\nimport labelsFromMultipleTaxonomiesList from '../common/helpers/labelsFromMultipleTaxonomiesList';\n\nexport default function () {\n    extend(DiscussionListItem.prototype, 'infoItems', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms), 10);\n        }\n    });\n\n    extend(DiscussionHero.prototype, 'items', function (items) {\n        const terms = this.props.discussion.taxonomyTerms();\n\n        if (terms && terms.length) {\n            items.add('taxonomies', labelsFromMultipleTaxonomiesList(terms, {link: true}), 5);\n        }\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport UserControls from 'flarum/utils/UserControls';\nimport Button from 'flarum/components/Button';\nimport ChooseTaxonomyTermsModal from './components/ChooseTaxonomyTermsModal';\nimport sortTaxonomies from '../common/utils/sortTaxonomies';\n\nexport default function () {\n    extend(UserControls, 'userControls', function (items, user) {\n        if (!user.attribute('fofCanEditTaxonomies')) {\n            return;\n        }\n\n        sortTaxonomies(app.forum.taxonomies()).forEach(taxonomy => {\n            if (taxonomy.type() !== 'users') {\n                return;\n            }\n\n            items.add('taxonomy-' + taxonomy.slug(), Button.component({\n                icon: 'fas fa-tag',\n                onclick: () => app.modal.show(new ChooseTaxonomyTermsModal({\n                    resource: user,\n                    taxonomy,\n                })),\n            }, app.translator.trans('fof-taxonomies.forum.user.edit', {\n                taxonomy: taxonomy.name(),\n            })));\n        });\n    });\n}\n","import app from 'flarum/app';\nimport {extend} from 'flarum/extend';\nimport icon from 'flarum/helpers/icon';\n\n/* global m, flarum */\n\nexport default function () {\n    // Verify User Directory is enabled and exports all the classes we need\n    if (\n        !flarum.extensions['fof-user-directory'] ||\n        !flarum.extensions['fof-user-directory'].searchTypes ||\n        !flarum.extensions['fof-user-directory'].searchTypes.AbstractType ||\n        !flarum.extensions['fof-user-directory'].components ||\n        !flarum.extensions['fof-user-directory'].components.SearchField\n    ) {\n        return;\n    }\n\n    // Class must be defined here because it needs to extend the base class\n    // Which might not be available yet when imports are resolved\n    class TaxonomyTermType extends flarum.extensions['fof-user-directory'].searchTypes.AbstractType {\n        constructor() {\n            super();\n\n            this.allTerms = null;\n        }\n\n        resourceType() {\n            return 'fof-taxonomy-terms';\n        }\n\n        search(query) {\n            this.loading = true;\n\n            this.loadTerms().then(() => {\n                this.loading = false;\n                this.suggestions = [];\n\n                if (!query) {\n                    return;\n                }\n\n                query = query.toLowerCase();\n\n                this.allTerms.forEach(term => {\n                    if (term.name().toLowerCase().indexOf(query) !== -1) {\n                        this.suggestions.push(term);\n                    }\n                });\n\n                m.redraw();\n            });\n        }\n\n        loadTerms() {\n            if (this.allTerms !== null) {\n                return Promise.resolve(null);\n            }\n\n            this.allTerms = [];\n\n            const promises = [];\n\n            app.store.all('fof-taxonomies').forEach(taxonomy => {\n                if (!taxonomy.canSearchUsers() || !taxonomy.showFilter()) {\n                    return;\n                }\n\n                promises.push(app.request({\n                    method: 'GET',\n                    url: app.forum.attribute('apiUrl') + taxonomy.apiEndpoint() + '/terms',\n                }).then(result => {\n                    const terms = app.store.pushPayload(result);\n\n                    terms.forEach(term => {\n                        term.pushData({\n                            relationships: {\n                                taxonomy,\n                            },\n                        });\n                    });\n\n                    this.allTerms.push(...terms);\n                }));\n            });\n\n            return Promise.all(promises);\n        }\n\n        renderKind(term) {\n            return term.taxonomy().name();\n        }\n\n        renderLabel(term) {\n            return m('.UserDirectorySearchLabel', term.color() ? {\n                className: 'colored',\n                style: {\n                    backgroundColor: term.color(),\n                },\n            } : {}, [\n                term.icon() ? [\n                    icon(term.icon()),\n                    ' ',\n                ] : null,\n                term.name(),\n            ]);\n        }\n\n        applyFilter(params, resource) {\n            params.q = params.q ? params.q + ' ' : '';\n            params.q += 'taxonomy:' + resource.taxonomy().slug() + ':' + resource.slug();\n        }\n\n        initializeFromParams(params) {\n            if (!params.q) {\n                return Promise.resolve([]);\n            }\n\n            const gambits = params.q.split(' ').filter(word => word.indexOf('taxonomy:') === 0);\n\n            if (!gambits.length) {\n                return Promise.resolve([]);\n            }\n\n            return this.loadTerms().then(() => {\n                const terms = [];\n\n                gambits.forEach(gambit => {\n                    const parts = gambit.split(':');\n\n                    if (parts.length < 3) {\n                        return;\n                    }\n\n                    const term = this.allTerms.find(t => t.slug() === parts[2] && t.taxonomy().slug() === parts[1]);\n\n                    if (term) {\n                        terms.push(term);\n                    }\n                });\n\n                return terms;\n            });\n        }\n    }\n\n    extend(flarum.extensions['fof-user-directory'].components.SearchField.prototype, 'filterTypes', function (items) {\n        items.add('fof-taxonomies', new TaxonomyTermType(), 15);\n    });\n}\n"],"sourceRoot":""}